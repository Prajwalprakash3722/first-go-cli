/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { FloatFilter } from "../../util/FloatFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { ApprovedCommentListRelationFilter } from "../../approvedComment/base/ApprovedCommentListRelationFilter";
import { AssetListRelationFilter } from "../../asset/base/AssetListRelationFilter";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { StringFilter } from "../../util/StringFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { IntFilter } from "../../util/IntFilter";
import { RejectedCommentListRelationFilter } from "../../rejectedComment/base/RejectedCommentListRelationFilter";
import { EnumTransactionTransactiontype } from "./EnumTransactionTransactiontype";
@InputType()
class TransactionWhereInput {
  @ApiProperty({
    required: false,
    type: FloatFilter,
  })
  @Type(() => FloatFilter)
  @IsOptional()
  @Field(() => FloatFilter, {
    nullable: true,
  })
  amount?: FloatFilter;

  @ApiProperty({
    required: false,
    type: () => ApprovedCommentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ApprovedCommentListRelationFilter)
  @IsOptional()
  @Field(() => ApprovedCommentListRelationFilter, {
    nullable: true,
  })
  approvedComments?: ApprovedCommentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AssetListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AssetListRelationFilter)
  @IsOptional()
  @Field(() => AssetListRelationFilter, {
    nullable: true,
  })
  assets?: AssetListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  date?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  description?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  event?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  lastStatus?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  level?: IntFilter;

  @ApiProperty({
    required: false,
    type: () => RejectedCommentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RejectedCommentListRelationFilter)
  @IsOptional()
  @Field(() => RejectedCommentListRelationFilter, {
    nullable: true,
  })
  rejectedComments?: RejectedCommentListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  signedOff?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  society?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumTransactionTransactiontype,
  })
  @IsEnum(EnumTransactionTransactiontype)
  @IsOptional()
  @Field(() => EnumTransactionTransactiontype, {
    nullable: true,
  })
  transactiontype?: "Open" | "Debit" | "Credit";
}
export { TransactionWhereInput };

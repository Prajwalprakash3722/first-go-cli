/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
  IsInt,
  IsEnum,
} from "class-validator";

import { ApprovedCommentCreateNestedManyWithoutTransactionsInput } from "./ApprovedCommentCreateNestedManyWithoutTransactionsInput";
import { Type } from "class-transformer";
import { AssetCreateNestedManyWithoutTransactionsInput } from "./AssetCreateNestedManyWithoutTransactionsInput";
import { RejectedCommentCreateNestedManyWithoutTransactionsInput } from "./RejectedCommentCreateNestedManyWithoutTransactionsInput";
import { EnumTransactionTransactiontype } from "./EnumTransactionTransactiontype";
@InputType()
class TransactionCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: false,
    type: () => ApprovedCommentCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => ApprovedCommentCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => ApprovedCommentCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  approvedComments?: ApprovedCommentCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: false,
    type: () => AssetCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => AssetCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => AssetCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  assets?: AssetCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  date!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  event!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  lastStatus!: boolean;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  level!: number;

  @ApiProperty({
    required: false,
    type: () => RejectedCommentCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => RejectedCommentCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => RejectedCommentCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  rejectedComments?: RejectedCommentCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  signedOff!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  society!: string;

  @ApiProperty({
    required: true,
    enum: EnumTransactionTransactiontype,
  })
  @IsEnum(EnumTransactionTransactiontype)
  @Field(() => EnumTransactionTransactiontype)
  transactiontype!: "Open" | "Debit" | "Credit";
}
export { TransactionCreateInput };

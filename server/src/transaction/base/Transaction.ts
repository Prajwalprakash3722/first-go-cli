/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsBoolean,
  IsInt,
  IsEnum,
} from "class-validator";

import { ApprovedComment } from "../../approvedComment/base/ApprovedComment";
import { Type } from "class-transformer";
import { Asset } from "../../asset/base/Asset";
import { RejectedComment } from "../../rejectedComment/base/RejectedComment";
import { EnumTransactionTransactiontype } from "./EnumTransactionTransactiontype";
@ObjectType()
class Transaction {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Number)
  amount!: number;

  @ApiProperty({
    required: false,
    type: () => [ApprovedComment],
  })
  @ValidateNested()
  @Type(() => ApprovedComment)
  @IsOptional()
  approvedComments?: Array<ApprovedComment>;

  @ApiProperty({
    required: false,
    type: () => [Asset],
  })
  @ValidateNested()
  @Type(() => Asset)
  @IsOptional()
  assets?: Array<Asset>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  date!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  description!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  event!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  lastStatus!: boolean;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  level!: number;

  @ApiProperty({
    required: false,
    type: () => [RejectedComment],
  })
  @ValidateNested()
  @Type(() => RejectedComment)
  @IsOptional()
  rejectedComments?: Array<RejectedComment>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  signedOff!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  society!: string;

  @ApiProperty({
    required: true,
    enum: EnumTransactionTransactiontype,
  })
  @IsEnum(EnumTransactionTransactiontype)
  @Field(() => EnumTransactionTransactiontype, {
    nullable: true,
  })
  transactiontype?: "Open" | "Debit" | "Credit";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { Transaction };

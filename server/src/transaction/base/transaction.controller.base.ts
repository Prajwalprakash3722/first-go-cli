/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TransactionService } from "../transaction.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TransactionCreateInput } from "./TransactionCreateInput";
import { TransactionWhereInput } from "./TransactionWhereInput";
import { TransactionWhereUniqueInput } from "./TransactionWhereUniqueInput";
import { TransactionFindManyArgs } from "./TransactionFindManyArgs";
import { TransactionUpdateInput } from "./TransactionUpdateInput";
import { Transaction } from "./Transaction";
import { ApprovedCommentFindManyArgs } from "../../approvedComment/base/ApprovedCommentFindManyArgs";
import { ApprovedComment } from "../../approvedComment/base/ApprovedComment";
import { ApprovedCommentWhereUniqueInput } from "../../approvedComment/base/ApprovedCommentWhereUniqueInput";
import { AssetFindManyArgs } from "../../asset/base/AssetFindManyArgs";
import { Asset } from "../../asset/base/Asset";
import { AssetWhereUniqueInput } from "../../asset/base/AssetWhereUniqueInput";
import { RejectedCommentFindManyArgs } from "../../rejectedComment/base/RejectedCommentFindManyArgs";
import { RejectedComment } from "../../rejectedComment/base/RejectedComment";
import { RejectedCommentWhereUniqueInput } from "../../rejectedComment/base/RejectedCommentWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TransactionControllerBase {
  constructor(
    protected readonly service: TransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Transaction })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: TransactionCreateInput
  ): Promise<Transaction> {
    return await this.service.create({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        description: true,
        event: true,
        id: true,
        lastStatus: true,
        level: true,
        signedOff: true,
        society: true,
        transactiontype: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Transaction] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(TransactionFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Transaction[]> {
    const args = plainToClass(TransactionFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        description: true,
        event: true,
        id: true,
        lastStatus: true,
        level: true,
        signedOff: true,
        society: true,
        transactiontype: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<Transaction | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        description: true,
        event: true,
        id: true,
        lastStatus: true,
        level: true,
        signedOff: true,
        society: true,
        transactiontype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() data: TransactionUpdateInput
  ): Promise<Transaction | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          description: true,
          event: true,
          id: true,
          lastStatus: true,
          level: true,
          signedOff: true,
          society: true,
          transactiontype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Transaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<Transaction | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          description: true,
          event: true,
          id: true,
          lastStatus: true,
          level: true,
          signedOff: true,
          society: true,
          transactiontype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ApprovedComment",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/approvedComments")
  @ApiNestedQuery(ApprovedCommentFindManyArgs)
  async findManyApprovedComments(
    @common.Req() request: Request,
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<ApprovedComment[]> {
    const query = plainToClass(ApprovedCommentFindManyArgs, request.query);
    const results = await this.service.findApprovedComments(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        transaction: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/approvedComments")
  async connectApprovedComments(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: ApprovedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvedComments: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/approvedComments")
  async updateApprovedComments(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: ApprovedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvedComments: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/approvedComments")
  async disconnectApprovedComments(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: ApprovedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approvedComments: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/assets")
  @ApiNestedQuery(AssetFindManyArgs)
  async findManyAssets(
    @common.Req() request: Request,
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<Asset[]> {
    const query = plainToClass(AssetFindManyArgs, request.query);
    const results = await this.service.findAssets(params.id, {
      ...query,
      select: {
        assetType: true,
        createdAt: true,
        id: true,

        transaction: {
          select: {
            id: true,
          },
        },

        transactionId: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/assets")
  async connectAssets(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assets: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/assets")
  async updateAssets(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assets: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/assets")
  async disconnectAssets(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: AssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assets: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "RejectedComment",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/rejectedComments")
  @ApiNestedQuery(RejectedCommentFindManyArgs)
  async findManyRejectedComments(
    @common.Req() request: Request,
    @common.Param() params: TransactionWhereUniqueInput
  ): Promise<RejectedComment[]> {
    const query = plainToClass(RejectedCommentFindManyArgs, request.query);
    const results = await this.service.findRejectedComments(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        transaction: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/rejectedComments")
  async connectRejectedComments(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: RejectedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rejectedComments: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/rejectedComments")
  async updateRejectedComments(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: RejectedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rejectedComments: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/rejectedComments")
  async disconnectRejectedComments(
    @common.Param() params: TransactionWhereUniqueInput,
    @common.Body() body: RejectedCommentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rejectedComments: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}

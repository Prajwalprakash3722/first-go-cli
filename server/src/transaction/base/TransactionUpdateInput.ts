/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  IsOptional,
  ValidateNested,
  IsDate,
  IsString,
  IsBoolean,
  IsInt,
  IsEnum,
} from "class-validator";

import { ApprovedCommentUpdateManyWithoutTransactionsInput } from "./ApprovedCommentUpdateManyWithoutTransactionsInput";
import { Type } from "class-transformer";
import { AssetUpdateManyWithoutTransactionsInput } from "./AssetUpdateManyWithoutTransactionsInput";
import { RejectedCommentUpdateManyWithoutTransactionsInput } from "./RejectedCommentUpdateManyWithoutTransactionsInput";
import { EnumTransactionTransactiontype } from "./EnumTransactionTransactiontype";
@InputType()
class TransactionUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  amount?: number;

  @ApiProperty({
    required: false,
    type: () => ApprovedCommentUpdateManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => ApprovedCommentUpdateManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => ApprovedCommentUpdateManyWithoutTransactionsInput, {
    nullable: true,
  })
  approvedComments?: ApprovedCommentUpdateManyWithoutTransactionsInput;

  @ApiProperty({
    required: false,
    type: () => AssetUpdateManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => AssetUpdateManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => AssetUpdateManyWithoutTransactionsInput, {
    nullable: true,
  })
  assets?: AssetUpdateManyWithoutTransactionsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  date?: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  event?: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  lastStatus?: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  level?: number;

  @ApiProperty({
    required: false,
    type: () => RejectedCommentUpdateManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => RejectedCommentUpdateManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => RejectedCommentUpdateManyWithoutTransactionsInput, {
    nullable: true,
  })
  rejectedComments?: RejectedCommentUpdateManyWithoutTransactionsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  signedOff?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  society?: string;

  @ApiProperty({
    required: false,
    enum: EnumTransactionTransactiontype,
  })
  @IsEnum(EnumTransactionTransactiontype)
  @IsOptional()
  @Field(() => EnumTransactionTransactiontype, {
    nullable: true,
  })
  transactiontype?: "Open" | "Debit" | "Credit";
}
export { TransactionUpdateInput };
